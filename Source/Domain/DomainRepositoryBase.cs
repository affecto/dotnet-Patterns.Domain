using System;
using System.Collections.Generic;

namespace Affecto.Patterns.Domain
{
    /// <summary>
    /// Base class for implementing domain repositories for aggregate root types.
    /// </summary>
    /// <typeparam name="TAggregate">The type of the aggregate root.</typeparam>
    public abstract class DomainRepositoryBase<TAggregate> : IDomainRepository<TAggregate>
        where TAggregate : AggregateRoot
    {
        protected readonly DomainEventBrokerBase domainEventBroker;

        /// <summary>
        /// Initializes a new instance of the <see cref="DomainRepositoryBase{TAggregate}"/> class.
        /// </summary>
        /// <param name="domainEventBroker">A broker used for publishing domain events generated by aggregate roots.</param>
        protected DomainRepositoryBase(DomainEventBrokerBase domainEventBroker)
        {
            if (domainEventBroker == null)
            {
                throw new ArgumentNullException("domainEventBroker");
            }

            this.domainEventBroker = domainEventBroker;
        }

        /// <summary>
        /// Executes all events that have been applied to the given aggregate root instance.
        /// </summary>
        /// <param name="aggregateRoot">The changed aggregate root instance.</param>
        public virtual void ApplyChanges(TAggregate aggregateRoot)
        {
            ExecuteAppliedEvents(aggregateRoot, domainEventBroker);
        }

        /// <summary>
        /// Executes all events that have been applied to the given set of aggregate root instances.
        /// </summary>
        /// <param name="aggregateRoots">The changed aggregate root instances.</param>
        public virtual void ApplyChanges(IEnumerable<TAggregate> aggregateRoots)
        {
            if (aggregateRoots == null)
            {
                throw new ArgumentNullException("aggregateRoots");
            }

            foreach (TAggregate aggregateRoot in aggregateRoots)
            {
                ExecuteAppliedEvents(aggregateRoot, domainEventBroker);
            }
        }

        /// <summary>
        /// Finds an aggregate root instance from the repository using its id.
        /// </summary>
        /// <param name="id">Aggregate root instance id.</param>
        /// <returns>Aggregate root instance.</returns>
        public abstract TAggregate Find(Guid id);

        /// <summary>
        /// Executes all events that have been applied to the given aggregate root instance.
        /// </summary>
        /// <param name="aggregateRoot">The changed aggregate root instance.</param>
        /// <param name="eventBroker">The event broker to be used for publishing events.</param>
        protected static void ExecuteAppliedEvents(TAggregate aggregateRoot, DomainEventBrokerBase eventBroker)
        {
            if (aggregateRoot == null)
            {
                throw new ArgumentNullException("aggregateRoot");
            }

            eventBroker.PublishEvents(aggregateRoot.GetAppliedEvents());
        }
    }
}