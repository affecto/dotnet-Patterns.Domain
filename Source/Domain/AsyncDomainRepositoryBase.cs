using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Affecto.Patterns.Domain
{
    /// <summary>
    /// Base class for implementing asynchronous domain repositories for aggregate root types.
    /// </summary>
    /// <typeparam name="TAggregate">The type of the aggregate root.</typeparam>
    public abstract class AsyncDomainRepositoryBase<TAggregate> : IAsyncDomainRepository<TAggregate>
        where TAggregate : AggregateRoot
    {
        protected readonly DomainEventBrokerBase domainEventBroker;

        /// <summary>
        /// Initializes a new instance of the <see cref="DomainRepositoryBase{TAggregate}"/> class.
        /// </summary>
        /// <param name="domainEventBroker">A broker used for publishing domain events generated by aggregate roots.</param>
        protected AsyncDomainRepositoryBase(DomainEventBrokerBase domainEventBroker)
        {
            this.domainEventBroker = domainEventBroker ?? throw new ArgumentNullException(nameof(domainEventBroker));
        }

        /// <summary>
        /// Asynchronously executes all events that have been applied to the given aggregate root instance.
        /// </summary>
        /// <param name="aggregateRoot">The changed aggregate root instance.</param>
        public virtual async Task ApplyChangesAsync(TAggregate aggregateRoot)
        {
            await ExecuteAppliedEventsAsync(aggregateRoot, domainEventBroker).ConfigureAwait(false);
        }

        /// <summary>
        /// Asynchronously executes all events that have been applied to the given set of aggregate root instances.
        /// </summary>
        /// <param name="aggregateRoots">The changed aggregate root instances.</param>
        public virtual async Task ApplyChangesAsync(IEnumerable<TAggregate> aggregateRoots)
        {
            if (aggregateRoots == null)
            {
                throw new ArgumentNullException(nameof(aggregateRoots));
            }

            foreach (TAggregate aggregateRoot in aggregateRoots)
            {
                await ExecuteAppliedEventsAsync(aggregateRoot, domainEventBroker).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Asynchronously finds an aggregate root instance from the repository using its id.
        /// </summary>
        /// <param name="id">Aggregate root instance id.</param>
        /// <returns>Aggregate root instance.</returns>
        public abstract Task<TAggregate> FindAsync(Guid id);

        /// <summary>
        /// Asynchronously executes all events that have been applied to the given aggregate root instance.
        /// </summary>
        /// <param name="aggregateRoot">The changed aggregate root instance.</param>
        /// <param name="eventBroker">The event broker to be used for publishing events.</param>
        protected static async Task ExecuteAppliedEventsAsync(TAggregate aggregateRoot, DomainEventBrokerBase eventBroker)
        {
            if (aggregateRoot == null)
            {
                throw new ArgumentNullException(nameof(aggregateRoot));
            }

            await eventBroker.PublishEventsAsync(aggregateRoot.GetAppliedEvents()).ConfigureAwait(false);
        }
    }
}